<!DOCTYPE html>
<html lang="fr" class="scroll-smooth">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Découvrez et explorez des milliers de proverbes kabyles (Inzan). Une collection interactive de la sagesse populaire de Kabylie avec des explications, des favoris et des suggestions par IA.">
    <meta property="og:title" content="Inzan n Teqbaylit - Trésors de la Sagesse Kabyle">
    <meta property="og:description" content="Découvrez et explorez des milliers de proverbes kabyles (Inzan). Une collection interactive de la sagesse populaire de Kabylie avec des explications, des favoris et des suggestions par IA.">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://ton-site.com">
    <meta property="og:image" content="https://ton-site.com/og-image.png">

    <title>Inzan n Teqbaylit - Trésors de la Sagesse Kabyle</title>

    <!-- Tailwind CSS avec defer pour optimiser le chargement -->
    <script src="https://cdn.tailwindcss.com" defer></script>

    <!-- Polices Google avec font-display: swap -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Tinos:ital,wght@0,400;0,700;1,400&family=Raleway:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <!-- Favicon (SVG + PNG pour compatibilité) -->
    <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22%3E%3Ctext y=%22.9em%22 font-size=%2290%22 fill=%22%234A7C59%22%3E%E2%9C%A7%3C/text%3E%3C/svg%3E">
    <link rel="icon" type="image/png" href="/favicon.png">

    <style>
        /* Variables CSS améliorées pour le thème et l'accessibilité */
        :root {
            --color-bg: #F9F7F3;
            --color-bg-card: #FFFFFF;
            --color-bg-alt: #F0EFEA;
            --color-text: #3D4A3A;
            --color-text-light: #6B7280;
            --color-heading: #2F4F4F;
            --color-primary: #4A7C59;
            --color-secondary: #3A644B;
            --color-accent: #C79A2A;
            --color-border: #E5E7EB;
            --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.04);
            --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.08), 0 2px 4px -2px rgb(0 0 0 / 0.08);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
            --font-serif: 'Tinos', serif;
            --font-sans: 'Raleway', sans-serif;
        }

        html.dark {
            --color-bg: #101418;
            --color-bg-card: #1A2026;
            --color-bg-alt: #1F272E;
            --color-text: #D1D5DB;
            --color-text-light: #9CA3AF;
            --color-heading: #F9FAFB;
            --color-primary: #52B788;
            --color-secondary: #3E9469;
            --color-accent: #FBBF24;
            --color-border: #374151;
        }

        /* Optimisation des performances pour les animations */
        .fade-in, .stagger-in, #splash-logo {
            will-change: transform, opacity;
        }

        /* Amélioration de la lisibilité et des transitions */
        body {
            background-color: var(--color-bg);
            font-family: var(--font-sans);
            color: var(--color-text);
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='40' height='40' viewBox='0 0 40 40'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.03'%3E%3Cpath d='M0 38.59l2.83-2.83 1.41 1.41L1.41 40H0v-1.41zM0 1.4l2.83 2.83 1.41-1.41L1.41 0H0v1.41zM38.59 40l-2.83-2.83 1.41-1.41L40 38.59V40h-1.41zM40 1.41l-2.83 2.83-1.41-1.41L38.59 0H40v1.41zM20 18.6l2.83-2.83 1.41 1.41L21.41 20l2.83 2.83-1.41 1.41L20 21.41l-2.83 2.83-1.41-1.41L18.59 20l-2.83-2.83 1.41-1.41L20 18.59z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        /* Optimisation des animations et transitions */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes zoomIn {
            from { transform: scale(0.8); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }
        .fade-in { animation: fadeIn 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards; }
        .stagger-in { animation: fadeIn 0.5s cubic-bezier(0.4, 0, 0.2, 1) both; }

        /* Accessibilité : focus visible amélioré */
        :focus-visible {
            outline: 3px solid var(--color-accent);
            outline-offset: 2px;
            border-radius: 0.375rem;
        }

        /* Barre de défilement personnalisée */
        .custom-scrollbar::-webkit-scrollbar { height: 8px; }
        .custom-scrollbar::-webkit-scrollbar-track { background: transparent; }
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background-color: #ccc;
            border-radius: 10px;
            border: 2px solid transparent;
            background-clip: content-box;
        }
        html.dark .custom-scrollbar::-webkit-scrollbar-thumb { background-color: #4B5563; }

        /* Styles pour le loader */
        .loader {
            width: 20px; height: 20px;
            border: 3px solid #FFF;
            border-bottom-color: transparent;
            border-radius: 50%;
            display: inline-block;
            box-sizing: border-box;
            animation: rotation 1s linear infinite;
        }
        .loader-dark { border-color: #666; border-bottom-color: transparent; }
        html.dark .loader-dark { border-color: #9CA3AF; border-bottom-color: transparent; }
        @keyframes rotation { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }

        /* Styles pour la modale (accessibilité) */
        #modal-backdrop.visible { opacity: 1; pointer-events: auto; }
        #modal-content.visible { opacity: 1; transform: translate(-50%, -50%) scale(1); pointer-events: auto; }
        #modal-body { -webkit-overflow-scrolling: touch; }

        /* Styles pour le Quiz */
        .quiz-option { border: 2px solid var(--color-border); padding: 0.75rem 1rem; border-radius: 0.5rem; cursor: pointer; transition: all 0.2s ease; }
        .quiz-option:hover { border-color: var(--color-primary); background-color: color-mix(in srgb, var(--color-primary) 10%, transparent); }
        .quiz-option.correct { border-color: #10B981; background-color: #D1FAE5; color: #064E3B; font-weight: bold; transform: scale(1.02); }
        html.dark .quiz-option.correct { background-color: #064E3B; color: #D1FAE5; }
        .quiz-option.incorrect { border-color: #EF4444; background-color: #FEE2E2; color: #991B1B; font-weight: bold; }
        html.dark .quiz-option.incorrect { background-color: #991B1B; color: #FEE2E2; }
        .quiz-option[disabled] { cursor: not-allowed; opacity: 0.7; }

        /* Toast notification */
        #toast { transition: all 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55); }
        #back-to-top.visible { opacity: 1; visibility: visible; transform: translateY(0); }

        /* Bouton favori */
        .favorite-btn.favorited svg { fill: #EC4899; stroke: #EC4899; color: #EC4899; transform: scale(1.1); }

        /* Prose pour le contenu généré */
        .prose h3 { margin-top: 1.5em; margin-bottom: 0.6em; font-size: 1.2em; font-weight: bold; color: var(--color-primary); border-bottom: 1px solid var(--color-border); padding-bottom: 0.3em;}
        .prose p, .prose ul { margin-bottom: 1em; line-height: 1.6; }
        .prose ul { list-style-position: inside; padding-left: 1em; }
        .prose li { margin-bottom: 0.5em; }

        /* Bouton de suppression de la recherche */
        .search-wrapper { position: relative; }
        .clear-search-btn {
            position: absolute; right: 0.75rem; top: 50%; transform: translateY(-50%);
            color: var(--color-text-light); opacity: 0; pointer-events: none; transition: opacity 0.2s;
        }
        .search-wrapper input:not(:placeholder-shown) + .clear-search-btn {
            opacity: 1; pointer-events: auto; cursor: pointer;
        }

        /* Écran de lancement */
        #splash-screen.hidden { opacity: 0; pointer-events: none; }
        #splash-logo { animation: zoomIn 1s cubic-bezier(0.4, 0, 0.2, 1) forwards; }

        /* Bouton "Charger Plus" */
        #load-more-btn.hidden { display: none; }
        #load-more-btn.loading { opacity: 0.7; cursor: wait; }
    </style>
</head>
<body class="p-4 sm:p-6 md:p-8 pb-32 sm:pb-8">
    <!-- Écran de lancement -->
    <div id="splash-screen" class="fixed inset-0 bg-[var(--color-bg)] z-[200] flex flex-col items-center justify-center transition-opacity duration-700 ease-out">
        <div id="splash-logo" class="opacity-0">
            <svg width="100" height="100" viewBox="0 0 100 100" class="text-[var(--color-accent)]">
                <text x="50" y="85" font-size="90" text-anchor="middle" fill="currentColor">ⵣ</text>
            </svg>
        </div>
        <p class="text-2xl font-serif font-bold text-[var(--color-heading)] mt-4">Inzan n Teqbaylit</p>
    </div>

    <div class="max-w-7xl mx-auto">
        <!-- En-tête -->
        <header class="relative text-center mb-8 md:mb-12">
            <div class="absolute top-0 right-0 z-50">
                <button id="theme-toggle" aria-label="Changer de thème" class="p-2 rounded-full bg-[var(--color-bg-card)] text-[var(--color-text)] shadow-md hover:scale-110 transition-transform">
                    <svg id="theme-icon-light" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" /></svg>
                    <svg id="theme-icon-dark" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" /></svg>
                </button>
            </div>

            <h1 class="text-4xl md:text-6xl font-serif font-bold text-[var(--color-heading)] mb-2 flex flex-col sm:flex-row justify-center items-center gap-2 sm:gap-4 pt-4">
                <svg width="40" height="40" viewBox="0 0 100 100" class="text-[var(--color-accent)] hidden md:inline-block"><text x="50" y="85" font-size="90" text-anchor="middle" fill="currentColor">ⵟ</text></svg>
                <span>Inzan n Teqbaylit</span>
                <svg width="40" height="40" viewBox="0 0 100 100" class="text-[var(--color-accent)] hidden md:inline-block"><text x="50" y="85" font-size="90" text-anchor="middle" fill="currentColor">ⵣ</text></svg>
            </h1>
            <p class="text-lg text-[var(--color-secondary)] italic font-light">Une Banque de <strong class="text-[var(--color-primary)] font-semibold">"plus de 2000 proverbes"</strong></p>
            <p class="text-[var(--color-text-light)] font-medium">Découvrez et explorez des milliers de proverbes kabyles (Inzan). Une collection interactive de la sagesse populaire de Kabylie avec des explications, des favoris et une recherche assistée par IA.</p>
            <span class="block mt-2 font-medium text-[var(--color-primary)]">"Anzi am ddwa, ilaq ad t-yesseqdec umdan akken iwulem."</span>
        </header>

        <!-- Navigation desktop -->
        <nav id="desktop-nav" class="hidden sm:flex justify-center mb-8">
            <div class="flex items-center gap-2 p-2 bg-[var(--color-bg-card)]/80 backdrop-blur-md rounded-xl shadow-md border border-[var(--color-border)]">
                <button data-tab="accueil-tab" class="nav-btn desktop flex items-center gap-2 px-4 py-2 text-[var(--color-text)] rounded-lg border-2 border-transparent" aria-label="Aller à l'accueil">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9 22 9 12 15 12 15 22"/></svg>
                    <span class="font-semibold">Accueil</span>
                </button>
                <button data-tab="explorer-tab" class="nav-btn desktop flex items-center gap-2 px-4 py-2 text-[var(--color-text)] rounded-lg border-2 border-transparent" aria-label="Explorer les proverbes">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.3-4.3"/></svg>
                    <span class="font-semibold">Explorer</span>
                </button>
                <button data-tab="favoris-tab" class="nav-btn desktop flex items-center gap-2 px-4 py-2 text-[var(--color-text)] rounded-lg border-2 border-transparent" aria-label="Voir les favoris">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" /></svg>
                    <span class="font-semibold">Favoris</span>
                </button>
                <button data-tab="ai-sage-tab" class="nav-btn desktop flex items-center gap-2 px-4 py-2 text-[var(--color-text)] rounded-lg border-2 border-transparent" aria-label="Consulter le Sage AI">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z"/></svg>
                    <span class="font-semibold">Sage AI</span>
                </button>
                <button data-tab="quiz-tab" class="nav-btn desktop flex items-center gap-2 px-4 py-2 text-[var(--color-text)] rounded-lg border-2 border-transparent" aria-label="Faire un quiz">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z"/><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/><path d="M12 17h.01"/></svg>
                    <span class="font-semibold">Quiz</span>
                </button>
            </div>
        </nav>

        <!-- Contenu principal -->
        <main>
            <!-- Onglet Accueil -->
            <section id="accueil-tab" class="tab-content active" aria-labelledby="proverb-of-the-day-title">
                <div class="max-w-4xl mx-auto mb-10 text-center p-6 bg-[var(--color-bg-card)]/70 rounded-xl shadow-inner border border-[var(--color-border)]">
                    <p class="text-lg text-[var(--color-secondary)] italic font-light">Une Banque de <strong class="text-[var(--color-primary)] font-semibold">"plus de 2000 proverbes"</strong></p>
                    <p class="text-[var(--color-text-light)] font-medium">Découvrez et explorez des milliers de proverbes kabyles (Inzan). Une collection interactive de la sagesse populaire de Kabylie avec des explications, des favoris et une recherche assistée par IA.</p>
                    <span class="block mt-2 font-medium text-[var(--color-primary)]">"Anzi am ddwa, ilaq ad t-yesseqdec umdan akken iwulem."</span>
                </div>
                <h2 id="proverb-of-the-day-title" class="text-3xl font-serif text-[var(--color-primary)] mb-5 text-center font-semibold">Proverbe du Jour 💡</h2>
                <div id="proverb-of-the-day-card" class="max-w-3xl mx-auto fade-in">
                    <div class="bg-[var(--color-bg-card)] p-6 rounded-xl shadow-2xl border-t-8 border-[var(--color-accent)] flex flex-col justify-center items-center h-40">
                        <span class="loader loader-dark"></span>
                        <p class="mt-4 text-sm text-[var(--color-text-light)]">Le proverbe du jour arrive, comme un rayon de soleil sur les montagnes de Kabylie...</p>
                    </div>
                </div>

                <div class="max-w-3xl mx-auto mt-12 fade-in">
                    <div class="bg-gradient-to-br from-yellow-50/50 to-amber-100/50 dark:from-gray-700/50 dark:to-gray-800/50 border-t-4 border-[var(--color-accent)] rounded-xl p-6 flex flex-col sm:flex-row items-center gap-6 shadow-lg">
                        <div class="flex-shrink-0 text-[var(--color-accent)]">
                            <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"/><path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"/></svg>
                        </div>
                        <div>
                            <h3 class="text-xl font-serif font-bold text-[var(--color-heading)] mb-2">Découvrez l'Œuvre Originale</h3>
                            <p class="text-[var(--color-text)] mb-2">
                                Une partie de cette banque de proverbes est extraite des 4 tomes de l'œuvre magistrale de Monsieur Aomar SIDER : <strong class="text-[var(--color-primary)] font-semibold">"INZAN amek i d-llan"</strong>
                            </p>
                            <p class="text-sm text-[var(--color-text-light)]">
                                Son livre, avec les explications étymologiques et l'origine détaillée de chaque proverbe, est disponible à la vente en 4 tomes dans les librairies.
                            </p>
                        </div>
                    </div>
                </div>

                <footer class="text-center mt-16 py-6 border-t-2 border-[var(--color-border)]">
                    <p class="text-[var(--color-text-light)] font-medium">Une collection de la sagesse populaire kabyle.</p>
                    <p class="text-sm text-[var(--color-text-light)] mt-1">Application développée par TAMAZIRT Boussad. <button id="about-btn" class="text-[var(--color-primary)] underline">En savoir plus</button>.</p>
                </footer>
            </section>

            <!-- Onglet Explorer -->
            <section id="explorer-tab" class="tab-content" aria-labelledby="explorer-title">
                <div class="sticky top-4 z-20 bg-[var(--color-bg-card)]/80 backdrop-blur-md rounded-xl shadow-lg border border-[var(--color-border)] mb-6">
                    <div class="p-4 space-y-4">
                        <div class="flex flex-col sm:flex-row gap-4 items-stretch">
                            <div class="search-wrapper flex-grow">
                                <input type="text" id="search-input" placeholder="Rechercher par mot-clé ou thème..." aria-label="Champ de recherche de proverbe" aria-describedby="results-feedback" class="w-full p-3 pr-10 border-2 border-[var(--color-border)] rounded-lg focus:border-[var(--color-primary)] focus:ring-2 focus:ring-[var(--color-primary)]/30 transition duration-200 text-lg shadow-inner bg-[var(--color-bg-card)]">
                                <button class="clear-search-btn" aria-label="Vider la recherche">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                                </button>
                            </div>
                            <button id="random-btn" aria-label="Afficher un proverbe aléatoire" class="w-full sm:w-auto px-5 py-3 bg-[var(--color-accent)] text-white font-semibold rounded-lg hover:bg-[var(--color-primary)] transition-all duration-300 flex items-center justify-center gap-2 shadow-md transform hover:scale-[1.02]">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"/><path d="M3 3v5h5"/><path d="M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16"/><path d="M21 21v-5h-5"/></svg>
                                <span>Aléatoire</span>
                            </button>
                        </div>
                        <nav id="theme-filter-nav" aria-label="Filtres de thèmes Kabyles">
                            <div class="flex items-center gap-3">
                                <h3 class="text-sm font-bold text-[var(--color-heading)] flex-shrink-0">Thèmes:</h3>
                                <div class="flex-grow overflow-x-auto custom-scrollbar">
                                    <div id="theme-list-container" class="flex gap-2 py-1"></div>
                                </div>
                            </div>
                        </nav>
                    </div>
                </div>

                <div id="results-feedback" class="mb-4 text-center text-[var(--color-text-light)] font-semibold min-h-[24px]"></div>

                <div id="results-container" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 min-h-[400px]">
                    <div id="initial-load-message" class="md:col-span-2 xl:col-span-3 text-center p-8 bg-[var(--color-bg-card)] rounded-lg shadow-inner flex flex-col items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="mx-auto text-[var(--color-text-light)] opacity-70"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></svg>
                        <p class="mt-4 text-lg text-[var(--color-text-light)]">Commencez votre recherche pour trouver un proverbe.</p>
                        <p class="text-md text-[var(--color-text-light)]">Ou cliquez sur "Aléatoire" pour une découverte.</p>
                    </div>
                </div>

                <div class="text-center mt-8">
                    <button id="load-more-btn" class="hidden w-full max-w-sm px-8 py-3 bg-[var(--color-primary)] text-white font-semibold rounded-lg shadow-md hover:bg-[var(--color-secondary)] transition-colors duration-300">
                        Charger 50 proverbes supplémentaires
                    </button>
                </div>

                <p id="no-results" class="text-center text-2xl text-[var(--color-text-light)] mt-12 hidden font-serif p-4 border border-dashed rounded-lg">
                    😔 Aucun proverbe ne correspond à votre recherche. <br> <span class="text-lg font-sans">Essayez de modifier vos mots-clés.</span>
                </p>
            </section>

            <!-- Onglet Favoris -->
            <section id="favoris-tab" class="tab-content" aria-labelledby="favoris-title">
                <h2 id="favoris-title" class="text-3xl font-serif text-[var(--color-primary)] mb-5 text-center font-semibold">Mes Favoris ❤️</h2>
                <div id="favorites-container" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 min-h-[400px]"></div>
                <div id="no-favorites" class="text-center text-xl text-[var(--color-text-light)] mt-12 hidden font-serif p-4">
                    <p>Vous n'avez pas encore de proverbes favoris.</p>
                    <button id="go-to-explorer-btn" class="mt-4 px-5 py-2 bg-[var(--color-primary)] text-white font-semibold rounded-lg shadow-md hover:scale-[1.02] transition-transform">Explorer les proverbes</button>
                </div>
            </section>

            <!-- Onglet Sage AI -->
            <section id="ai-sage-tab" class="tab-content" aria-labelledby="ai-sage-title">
                <h2 id="ai-sage-title" class="text-3xl font-serif text-[var(--color-primary)] mb-5 text-center font-semibold">Le Sage Artificiel 🤖</h2>
                <div class="fade-in max-w-3xl mx-auto bg-[var(--color-bg-card)]/95 p-6 rounded-xl shadow-lg border border-[var(--color-border)]">
                    <p class="text-center text-[var(--color-text-light)] mb-4">Décrivez une situation, et laissez notre sage vous proposer les proverbes les plus pertinents.</p>
                    <textarea id="ai-context-input" class="w-full p-3 border-2 border-[var(--color-border)] rounded-lg focus:border-[var(--color-primary)] focus:ring-2 focus:ring-[var(--color-primary)]/30 transition duration-200 text-lg shadow-inner mb-4 bg-[var(--color-bg)]" rows="3" placeholder="Exemple : Mon ami parle beaucoup mais n'agit jamais..."></textarea>
                    <button id="ai-suggest-btn" class="w-full px-5 py-3 bg-[var(--color-secondary)] text-white font-semibold rounded-lg hover:bg-[var(--color-primary)] transition-all duration-300 flex items-center justify-center gap-2 shadow-md transform hover:scale-[1.02] disabled:opacity-70 disabled:cursor-not-allowed">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z"/></svg>
                        <span>✨ Demander conseil</span>
                    </button>
                    <div id="ai-result-feedback" role="status" aria-live="polite" class="mt-4 min-h-[24px]"></div>
                </div>
            </section>

            <!-- Onglet Quiz -->
            <section id="quiz-tab" class="tab-content" aria-labelledby="quiz-title">
                <h2 id="quiz-title" class="text-3xl font-serif text-[var(--color-primary)] mb-5 text-center font-semibold">Quiz de Sagesse 🧠</h2>
                <div id="quiz-container" class="fade-in max-w-3xl mx-auto bg-[var(--color-bg-card)]/95 p-6 rounded-xl shadow-lg border border-[var(--color-border)]">
                    <div class="text-center p-8">
                        <span class="loader loader-dark"></span>
                        <p class="mt-4 text-sm text-[var(--color-text-light)]">Chargement des données du Quiz...</p>
                    </div>
                </div>
            </section>
        </main>
    </div>

    <!-- Navigation mobile -->
    <nav id="mobile-nav" class="sm:hidden fixed bottom-4 left-4 right-4 bg-[var(--color-bg-card)]/80 backdrop-blur-lg border border-[var(--color-border)] flex justify-around shadow-2xl z-50 rounded-full p-1">
        <button data-tab="accueil-tab" class="nav-btn mobile flex-1 flex flex-col items-center p-2 text-[var(--color-text)]" aria-label="Aller à l'accueil">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9 22 9 12 15 12 15 22"/></svg>
            <span class="text-xs font-semibold">Accueil</span>
        </button>
        <button data-tab="explorer-tab" class="nav-btn mobile flex-1 flex flex-col items-center p-2 text-[var(--color-text)]" aria-label="Explorer les proverbes">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.3-4.3"/></svg>
            <span class="text-xs font-semibold">Explorer</span>
        </button>
        <button data-tab="favoris-tab" class="nav-btn mobile flex-1 flex flex-col items-center p-2 text-[var(--color-text)]" aria-label="Voir les favoris">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" /></svg>
            <span class="text-xs font-semibold">Favoris</span>
        </button>
        <button data-tab="ai-sage-tab" class="nav-btn mobile flex-1 flex flex-col items-center p-2 text-[var(--color-text)]" aria-label="Consulter le Sage AI">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z"/></svg>
            <span class="text-xs font-semibold">Sage AI</span>
        </button>
        <button data-tab="quiz-tab" class="nav-btn mobile flex-1 flex flex-col items-center p-2 text-[var(--color-text)]" aria-label="Faire un quiz">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z"/><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/><path d="M12 17h.01"/></svg>
            <span class="text-xs font-semibold">Quiz</span>
        </button>
    </nav>

    <!-- Toast notification -->
    <div id="toast" role="status" aria-live="polite" class="fixed bottom-[-100px] left-1/2 -translate-x-1/2 bg-green-700 text-white py-2 px-5 rounded-full shadow-xl opacity-0 z-[1000]">
        <p>Message</p>
    </div>

    <!-- Bouton "Retour en haut" -->
    <button id="back-to-top" title="Retour en haut" aria-label="Retourner en haut de la page" class="fixed bottom-[100px] sm:bottom-10 right-5 p-3 bg-[var(--color-secondary)] text-white rounded-full shadow-xl hover:bg-[var(--color-primary)] focus:outline-none transition-all opacity-0 visibility-hidden transform-gpu translate-y-5 z-50">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m18 15-6-6-6 6"/></svg>
    </button>

    <!-- Modale -->
    <div id="modal-backdrop" class="fixed inset-0 bg-black/60 z-[100] opacity-0 pointer-events-none transition-opacity duration-300"></div>
    <div id="modal-content" role="dialog" aria-modal="true" aria-labelledby="modal-title" class="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[90%] max-w-2xl max-h-[85vh] bg-[var(--color-bg-card)] rounded-lg shadow-2xl z-[101] opacity-0 scale-95 pointer-events-none transition-all duration-300 flex flex-col">
        <header class="flex-shrink-0 p-6 pb-4 pr-12 border-b border-[var(--color-border)]">
            <h2 id="modal-title" class="text-2xl font-serif text-[var(--color-heading)]"></h2>
        </header>
        <div id="modal-body" class="prose max-w-none text-[var(--color-text)] p-6 overflow-y-auto"></div>
        <button id="modal-close-btn" aria-label="Fermer la modale" class="absolute top-4 right-4 text-gray-400 hover:text-[var(--color-heading)] transition-colors z-20 p-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
        </button>
    </div>

    <!-- Script principal -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- CONSTANTES & ÉLÉMENTS DU DOM ---
            const PROVERBS_PER_PAGE = 50;
            const dom = {
                html: document.documentElement,
                splashScreen: document.getElementById('splash-screen'),
                searchInput: document.getElementById('search-input'),
                clearSearchBtn: document.querySelector('.clear-search-btn'),
                resultsContainer: document.getElementById('results-container'),
                resultsFeedback: document.getElementById('results-feedback'),
                initialLoadMessage: document.getElementById('initial-load-message'),
                loadMoreBtn: document.getElementById('load-more-btn'),
                favoritesContainer: document.getElementById('favorites-container'),
                noResults: document.getElementById('no-results'),
                noFavorites: document.getElementById('no-favorites'),
                goToExplorerBtn: document.getElementById('go-to-explorer-btn'),
                toast: document.getElementById('toast'),
                proverbOfTheDayCard: document.getElementById('proverb-of-the-day-card'),
                randomBtn: document.getElementById('random-btn'),
                backToTopBtn: document.getElementById('back-to-top'),
                themeListContainer: document.getElementById('theme-list-container'),
                navButtons: document.querySelectorAll('.nav-btn'),
                tabContents: document.querySelectorAll('.tab-content'),
                quizContainer: document.getElementById('quiz-container'),
                aboutBtn: document.getElementById('about-btn'),
                themeToggle: document.getElementById('theme-toggle'),
                themeIcons: { light: document.getElementById('theme-icon-light'), dark: document.getElementById('theme-icon-dark') },
                modal: {
                    backdrop: document.getElementById('modal-backdrop'),
                    content: document.getElementById('modal-content'),
                    title: document.getElementById('modal-title'),
                    body: document.getElementById('modal-body'),
                    closeBtn: document.getElementById('modal-close-btn'),
                },
                ai: {
                    contextInput: document.getElementById('ai-context-input'),
                    suggestBtn: document.getElementById('ai-suggest-btn'),
                    resultFeedback: document.getElementById('ai-result-feedback'),
                }
            };

            // --- ÉTAT GLOBAL DE L'APPLICATION ---
            const state = {
                activeTheme: 'tous',
                searchTimeout: null,
                proverbs: [],
                favorites: new Set(JSON.parse(localStorage.getItem('inzan_favorites')) || []),
                trapFocusHandler: null,
                isCoreDataLoaded: false,
                currentPage: 0,
                displayedProverbs: []
            };

            // --- FONCTIONS UTILITAIRES ---
            const normalizeText = (text) => {
                if (!text) return '';
                return text
                    .toLowerCase()
                    .replace(/ǧ/g, 'g')
                    .replace(/č/g, 'c')
                    .replace(/ṣ/g, 's')
                    .replace(/ṭ/g, 't')
                    .replace(/ẓ/g, 'z')
                    .normalize("NFD")
                    .replace(/[\u0300-\u036f]/g, "")
                    .trim();
            };

            const debounce = (func, delay) => (...args) => {
                clearTimeout(state.searchTimeout);
                state.searchTimeout = setTimeout(() => func(...args), delay);
            };

            // Fonction de rendu Markdown sécurisée avec DOMPurify (à ajouter via CDN ou npm)
            const renderMarkdown = (text) => {
                let html = text.trim();
                html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');
                html = html.replace(/\*\*(.*?)\*\*/gim, '<strong>$1</strong>');
                html = html.replace(/\*(.*?)\*/gim, '<em>$1</em>');
                html = html.replace(/^\* (.*$)/gim, '<li>$1</li>').replace(/(\<\/li\>)?\n<li>/gim, '</li><li>').replace(/^(<li>.*<\/li>)$/gim, '<ul>$1</ul>');
                return html.split('\n\n').map(p => {
                    if (p.startsWith('<ul>') || p.startsWith('<h3>')) return p;
                    return `<p>${p.replace(/\n/g, '<br>')}</p>`;
                }).join('');
            };

            const showToast = (message, isError = false) => {
                dom.toast.querySelector('p').textContent = message;
                dom.toast.className = `fixed bottom-[-100px] left-1/2 -translate-x-1/2 text-white py-2 px-5 rounded-full shadow-xl opacity-0 z-[1000] ${isError ? 'bg-red-600' : 'bg-green-700'}`;
                requestAnimationFrame(() => {
                    dom.toast.classList.add('bottom-28', 'sm:bottom-10', 'opacity-100');
                });
                setTimeout(() => dom.toast.classList.remove('bottom-28', 'sm:bottom-10', 'opacity-100'), 3000);
            };

            const highlightText = (text, query) => {
                if (!query) return text;
                const normalizedQuery = normalizeText(query);
                if (!normalizedQuery) return text;
                const keywords = normalizedQuery.split(' ').filter(k => k.length > 0);
                if (keywords.length === 0) return text;
                const regex = new RegExp(`(${keywords.join('|')})`, 'gi');
                return text.replace(regex, `<span class="search-highlight">$1</span>`);
            };

            // --- RENDU UI DYNAMIQUE ---
            const createProverbCardHTML = (proverb, isDaily = false, query = '') => {
                if (!proverb) return '';
                const themes = proverb.theme.split(/[,/]/).map(t => t.trim().replace(/[()]/g, '')).filter(Boolean);
                const themesHtml = themes.map(theme => `<button class="card-theme-badge px-2 py-1 rounded-full text-xs font-semibold bg-[var(--color-primary)]/10 text-[var(--color-primary)]" data-theme="${normalizeText(theme)}">${theme.charAt(0).toUpperCase() + theme.slice(1).toLowerCase()}</button>`).join('');
                const cardClasses = isDaily
                    ? `bg-[var(--color-bg-card)] p-6 rounded-xl shadow-2xl border-t-8 border-[var(--color-accent)]`
                    : `stagger-in bg-[var(--color-bg-card)] p-5 rounded-lg shadow-md hover:shadow-xl hover:-translate-y-1 transition-all flex flex-col border-l-4 border-[var(--color-primary)]`;
                const isFavorited = state.favorites.has(proverb.id);
                return `<div class="${cardClasses}" id="proverb-${proverb.id}" data-id="${proverb.id}">
                            <div class="flex-grow">
                                <p class="text-xl font-serif font-bold text-[var(--color-heading)] mb-2 italic">« ${highlightText(proverb.kabyle, query)} »</p>
                                <p class="text-[var(--color-text)] text-lg mb-4 border-b border-[var(--color-border)] pb-3 font-light">— ${highlightText(proverb.francais, query)}</p>
                                <div class="flex flex-wrap gap-2 items-center min-h-[30px]">${themesHtml}</div>
                            </div>
                            <div class="mt-4 pt-3 border-t border-[var(--color-border)] flex justify-between items-center gap-2">
                               <button class="explain-btn text-xs font-semibold text-[var(--color-text-light)] hover:text-[var(--color-primary)] transition-colors">Expliquer ✨</button>
                               <div class="flex items-center gap-1 text-[var(--color-text-light)]">
                                    <button class="action-btn favorite-btn ${isFavorited ? 'favorited' : ''} p-1 hover:text-pink-500" aria-label="Ajouter aux favoris">
                                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" /></svg>
                                    </button>
                                    <button class="action-btn copy-btn p-1 hover:text-[var(--color-primary)]" aria-label="Copier le proverbe">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"/><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/></svg>
                                    </button>
                                    <button class="action-btn share-btn p-1 hover:text-[var(--color-primary)]" aria-label="Partager le proverbe">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M8.684 13.342C8.886 12.938 9 12.482 9 12s-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6.002l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.367a3 3 0 105.367 2.684 3 3 0 00-5.367 2.684z" /></svg>
                                    </button>
                               </div>
                            </div>
                        </div>`;
            };

            const renderChunk = (container, proverbs, query, append = true) => {
                const chunkHtml = proverbs.map((p, i) => {
                    const cardHTML = createProverbCardHTML(p, false, query);
                    const wrapper = document.createElement('div');
                    wrapper.innerHTML = cardHTML;
                    const cardElement = wrapper.firstElementChild;
                    cardElement.style.animationDelay = `${i * 50}ms`;
                    return cardElement.outerHTML;
                }).join('');
                if (append) container.insertAdjacentHTML('beforeend', chunkHtml);
                else container.innerHTML = chunkHtml;
            };

            const updateAvailableThemes = () => {
                if (state.displayedProverbs.length === 0) {
                    dom.themeListContainer.innerHTML = `<p class="text-sm text-[var(--color-text-light)]">Recherchez pour voir les thèmes.</p>`;
                    return;
                }
                const allThemesRaw = state.displayedProverbs.flatMap(p => p.theme.split(/[,/]/).map(t => t.trim().replace(/[()]/g, '')).filter(Boolean));
                const uniqueNormalizedThemes = [...new Map(allThemesRaw.map(t => [normalizeText(t), t.charAt(0).toUpperCase() + t.slice(1).toLowerCase()])).entries()];
                uniqueNormalizedThemes.sort((a, b) => a[1].localeCompare(b[1]));
                dom.themeListContainer.innerHTML = `<button class="theme-pill-button flex-shrink-0 px-4 py-2 rounded-full bg-[var(--color-bg-alt)] shadow-sm cursor-pointer font-medium text-sm text-[var(--color-text)] hover:bg-[var(--color-primary)]/20" data-theme="tous">Tous</button>` +
                    uniqueNormalizedThemes.map(([norm, disp]) => `<button class="theme-pill-button flex-shrink-0 px-4 py-2 rounded-full bg-[var(--color-bg-alt)] shadow-sm cursor-pointer font-medium text-sm text-[var(--color-text)] hover:bg-[var(--color-primary)]/20" data-theme="${norm}">${disp}</button>`).join('');
                const activeThemeButton = dom.themeListContainer.querySelector(`[data-theme="${state.activeTheme}"]`);
                if (activeThemeButton) activeThemeButton.classList.add('active');
                else dom.themeListContainer.querySelector('[data-theme="tous"]').classList.add('active');
            };

            // --- LOGIQUE DE L'ONGLET EXPLORER ---
            const updateLoadMoreButton = (totalFilteredCount) => {
                if (!state.isCoreDataLoaded) return;
                const isSearchingOrFiltering = dom.searchInput.value || state.activeTheme !== 'tous';
                if (!isSearchingOrFiltering || state.displayedProverbs.length >= totalFilteredCount) {
                    dom.loadMoreBtn.classList.add('hidden');
                } else {
                    dom.loadMoreBtn.classList.remove('hidden');
                    const remaining = totalFilteredCount - state.displayedProverbs.length;
                    dom.loadMoreBtn.textContent = `Charger ${Math.min(PROVERBS_PER_PAGE, remaining)} proverbes supplémentaires`;
                }
            };

            const filterProverbs = () => {
                if (!state.isCoreDataLoaded) return [];
                const query = dom.searchInput.value;
                const normalizedQuery = normalizeText(query);
                if (!normalizedQuery && state.activeTheme === 'tous') return [];
                const keywords = normalizedQuery.split(' ').filter(k => k.length > 0);
                return state.proverbs.filter(p => {
                    const themeMatch = state.activeTheme === 'tous' || p.theme_norm.includes(state.activeTheme);
                    const queryMatch = keywords.length === 0 ? true : (() => {
                        const searchableText = `${p.kabyle_norm} ${p.francais_norm} ${p.theme_norm}`;
                        return keywords.every(keyword => searchableText.includes(keyword));
                    })();
                    return themeMatch && queryMatch;
                });
            };

            const loadNextChunk = (reset = false) => {
                if (!state.isCoreDataLoaded) return;
                const filteredProverbs = filterProverbs();
                if (reset) {
                    state.currentPage = 0;
                    state.displayedProverbs = [];
                    dom.resultsContainer.innerHTML = '';
                    dom.initialLoadMessage.classList.add('hidden');
                }
                const startIndex = state.currentPage * PROVERBS_PER_PAGE;
                const endIndex = startIndex + PROVERBS_PER_PAGE;
                const chunkToLoad = filteredProverbs.slice(startIndex, endIndex);
                if (chunkToLoad.length === 0 && reset) {
                    dom.noResults.classList.remove('hidden');
                    dom.resultsFeedback.textContent = '';
                } else {
                    dom.noResults.classList.add('hidden');
                    dom.resultsFeedback.textContent = `Affichage de ${Math.min(state.displayedProverbs.length + chunkToLoad.length, filteredProverbs.length)} sur ${filteredProverbs.length} proverbes`;
                }
                renderChunk(dom.resultsContainer, chunkToLoad, dom.searchInput.value, true);
                state.displayedProverbs.push(...chunkToLoad);
                state.currentPage++;
                updateLoadMoreButton(filteredProverbs.length);
                updateAvailableThemes();
            };

            // --- FONCTIONS D'AFFICHAGE ET DE NAVIGATION ---
            const renderFavorites = () => {
                if (!state.isCoreDataLoaded) {
                    dom.favoritesContainer.innerHTML = `<div class="md:col-span-2 xl:col-span-3 text-center p-8 text-[var(--color-text-light)]"><span class="loader loader-dark"></span> <p class="mt-2">Chargement des données en cours...</p></div>`;
                    return;
                }
                const favoriteProverbs = state.proverbs.filter(p => state.favorites.has(p.id));
                dom.noFavorites.classList.toggle('hidden', favoriteProverbs.length > 0);
                renderChunk(dom.favoritesContainer, favoriteProverbs, '', false);
            };

            const resetThemeFilter = (update = true) => {
                state.activeTheme = 'tous';
                sessionStorage.setItem('inzan_theme_filter', 'tous');
                dom.themeListContainer.querySelector('.active')?.classList.remove('active');
                const tousButton = dom.themeListContainer.querySelector('[data-theme="tous"]');
                if (tousButton) {
                    tousButton.classList.add('active');
                    tousButton.scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'nearest' });
                }
                if(update) loadNextChunk(true);
            };

            const setActiveTab = (tabId) => {
                if (['quiz-tab', 'ai-sage-tab'].includes(tabId) && !state.isCoreDataLoaded) {
                    showToast("Les données de base ne sont pas encore chargées.", true);
                    return;
                }
                dom.tabContents.forEach(content => content.classList.toggle('active', content.id === tabId));
                dom.navButtons.forEach(button => button.classList.toggle('active', button.dataset.tab === tabId));
                if (tabId === 'favoris-tab') renderFavorites();
                if (tabId === 'quiz-tab' && state.isCoreDataLoaded && !dom.quizContainer.querySelector('#next-quiz-btn')) startQuiz();
                if (document.body.clientWidth < 640) window.scrollTo({ top: 0, behavior: 'smooth' });
            };

            const toggleFavorite = (id) => {
                const isFavorited = state.favorites.has(id);
                if (isFavorited) {
                    state.favorites.delete(id);
                    showToast("💔 Retiré des favoris", true);
                } else {
                    state.favorites.add(id);
                    showToast("❤️ Ajouté aux favoris !");
                }
                localStorage.setItem('inzan_favorites', JSON.stringify([...state.favorites]));
                document.querySelectorAll(`#proverb-${id} .favorite-btn`).forEach(btn => {
                    btn.classList.toggle('favorited', !isFavorited);
                });
                if (document.getElementById('favoris-tab').classList.contains('active')) renderFavorites();
            };

            // --- MODALE ET LOGIQUE API ---
            const openModal = (title, bodyContent) => {
                dom.modal.title.textContent = title;
                dom.modal.body.innerHTML = bodyContent;
                dom.modal.backdrop.classList.add('visible');
                dom.modal.content.classList.add('visible');
                document.body.style.overflow = 'hidden';
                const focusableElements = dom.modal.content.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
                const firstElement = focusableElements[0];
                const lastElement = focusableElements[focusableElements.length - 1];
                firstElement?.focus();
                state.trapFocusHandler = (e) => {
                    if (e.key === 'Tab') {
                        if (e.shiftKey) { if (document.activeElement === firstElement) { lastElement.focus(); e.preventDefault(); } }
                        else { if (document.activeElement === lastElement) { firstElement.focus(); e.preventDefault(); } }
                    } else if (e.key === 'Escape') closeModal();
                };
                document.addEventListener('keydown', state.trapFocusHandler);
            };

            const closeModal = () => {
                dom.modal.backdrop.classList.remove('visible');
                dom.modal.content.classList.remove('visible');
                document.body.style.overflow = '';
                if (state.trapFocusHandler) {
                    document.removeEventListener('keydown', state.trapFocusHandler);
                    state.trapFocusHandler = null;
                }
            };

            // Appel à l'API Gemini (clé en dur - à sécuriser plus tard)
            const callGeminiAPI = async (payload, expectJson = false) => {
                const GEMINI_API_KEY = "AIzaSyD3cGyEYYhNbFN6WlMKb5wjpdDqfR8RaN4";
                if (!GEMINI_API_KEY) throw new Error("La clé API n'est pas configurée.");
                const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${GEMINI_API_KEY}`;
                if (expectJson) payload.generationConfig = { responseMimeType: "application/json" };
                const response = await fetch(API_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData?.error?.message || `Erreur HTTP ${response.status}`);
                }
                const result = await response.json();
                const textResponse = result.candidates?.[0]?.content?.parts?.[0]?.text;
                if (!textResponse) throw new Error("Réponse de l'API malformée ou vide.");
                return expectJson ? JSON.parse(textResponse) : textResponse;
            };

            const getProverbExplanation = async (proverb) => {
                openModal("Explication du Proverbe", `<div class="flex justify-center p-8"><span class="loader loader-dark"></span></div>`);
                const systemPrompt = `Vous êtes un expert de la culture kabyle. Expliquez le proverbe suivant de manière claire. Structurez votre réponse en Markdown avec les titres: '### Signification littérale', '### Signification imagée', et '### Exemple d'utilisation'. Soyez concis et direct.`;
                try {
                    const explanation = await callGeminiAPI({
                        contents: [{ parts: [{ text: `Explique ce proverbe kabyle : "${proverb.kabyle}" (qui se traduit par "${proverb.francais}")` }] }],
                        systemInstruction: { parts: [{ text: systemPrompt }] }
                    });
                    dom.modal.body.innerHTML = renderMarkdown(explanation);
                } catch (error) {
                    dom.modal.body.innerHTML = `<p class="text-red-500">Désolé, une erreur est survenue lors de la communication avec le Sage Artificiel. <br><strong>Détail :</strong> ${error.message}</p>`;
                }
            };

            const getAISuggestion = async (context) => {
                dom.ai.suggestBtn.disabled = true;
                dom.ai.suggestBtn.innerHTML = `<span class="loader"></span> <span>Analyse...</span>`;
                dom.ai.resultFeedback.innerHTML = '';
                const rawProverbs = state.proverbs.map(({ kabyle, francais, theme, explication }, id) => ({ id, kabyle, francais, theme, explication }));
                const systemPrompt = `Vous êtes un sage kabyle expert en proverbes. Analysez la situation de l'utilisateur et choisissez jusqu'à 3 proverbes les plus pertinents à partir de la liste fournie. Vous devez OBLIGATOIREMENT répondre avec un objet JSON valide et rien d'autre.`;
                const userPrompt = `Situation de l'utilisateur: "${context}"\n\nListe des proverbes disponibles (limité pour l'exemple):\n${JSON.stringify(rawProverbs.slice(0, 500))}\n\nChoisissez les proverbes les plus appropriés et répondez UNIQUEMENT avec un objet JSON au format suivant:\n{ "reasoning": "Votre analyse générale de la situation en une phrase.", "proverbs": [ { "id": <id_du_proverbe_1>, "justification": "Pourquoi ce proverbe est pertinent." } ] }`;
                try {
                    const suggestion = await callGeminiAPI({
                        contents: [{ parts: [{ text: userPrompt }] }],
                        systemInstruction: { parts: [{ text: systemPrompt }] }
                    }, true);
                    if (!suggestion || !suggestion.proverbs || suggestion.proverbs.length === 0) {
                        dom.ai.resultFeedback.innerHTML = `<p class="text-center text-[var(--color-text-light)]">Le sage n'a pas trouvé de proverbe parfaitement adapté. Essayez de reformuler.</p>`;
                        return;
                    }
                    let htmlResult = `<p class="text-center italic text-[var(--color-text-light)] mb-4">"${suggestion.reasoning}"</p>`;
                    suggestion.proverbs.forEach(p => {
                        const fullProverb = state.proverbs.find(fp => fp.id === p.id);
                        if (fullProverb) {
                            htmlResult += `<div class="p-3 mb-3 bg-[var(--color-bg)] rounded-lg border-l-4 border-dashed border-[var(--color-secondary)]">
                                            <p class="font-semibold text-sm text-[var(--color-heading)]">Justification du sage :</p>
                                            <p class="italic text-sm">"${p.justification}"</p>
                                          </div>`;
                            htmlResult += createProverbCardHTML(fullProverb);
                        }
                    });
                    dom.ai.resultFeedback.innerHTML = htmlResult;
                } catch (e) {
                    dom.ai.resultFeedback.innerHTML = `<p class="text-red-500 text-center">Le sage doit se reposer. Une erreur est survenue. <br><strong>Détail :</strong> ${e.message}</p>`;
                } finally {
                    dom.ai.suggestBtn.disabled = false;
                    dom.ai.suggestBtn.innerHTML = `✨ Demander conseil`;
                }
            };

            // --- LOGIQUE DU QUIZ ---
            const startQuiz = () => {
                const quizProverbs = [];
                const usedIds = new Set();
                const sampleSize = Math.min(50, state.proverbs.length);
                while(quizProverbs.length < sampleSize) {
                    const randomIndex = Math.floor(Math.random() * state.proverbs.length);
                    const randomProverb = state.proverbs[randomIndex];
                    if (!usedIds.has(randomProverb.id)) {
                        quizProverbs.push(randomProverb);
                        usedIds.add(randomProverb.id);
                    }
                }
                if (quizProverbs.length < 4) {
                    dom.quizContainer.innerHTML = `<p class="text-center text-[var(--color-text-light)]">Pas assez de données pour générer un quiz.</p>`;
                    return;
                }
                const questionType = Math.random() < 0.5 ? 'meaning' : 'theme';
                if (questionType === 'meaning') generateMeaningQuestion(quizProverbs);
                else generateThemeQuestion(quizProverbs);
            };

            const generateMeaningQuestion = (quizProverbs) => {
                const correctAnswer = quizProverbs[Math.floor(Math.random() * quizProverbs.length)];
                let options = [correctAnswer];
                while (options.length < 4) {
                    const randomOption = quizProverbs[Math.floor(Math.random() * quizProverbs.length)];
                    if (!options.some(opt => opt.id === randomOption.id)) options.push(randomOption);
                }
                options.sort(() => Math.random() - 0.5);
                dom.quizContainer.innerHTML = `<p class="text-center text-lg mb-4">Que signifie ce proverbe ?</p>
                    <p class="text-2xl font-serif text-center font-bold text-[var(--color-heading)] mb-6 p-4 bg-[var(--color-bg-alt)] rounded-lg">« ${correctAnswer.kabyle} »</p>
                    <div id="quiz-options" class="space-y-3">
                        ${options.map(opt => `<div class="quiz-option" data-id="${opt.id}" tabindex="0">${opt.francais}</div>`).join('')}
                    </div><div id="quiz-feedback" class="mt-6 text-center"></div>`;
                dom.quizContainer.querySelector('#quiz-options').addEventListener('click', (e) => {
                    if(e.target.closest('.quiz-option')) handleQuizAnswer(e.target.closest('.quiz-option'), correctAnswer, 'meaning', quizProverbs);
                });
            };

            const generateThemeQuestion = (quizProverbs) => {
                const proverb = quizProverbs[Math.floor(Math.random() * quizProverbs.length)];
                const correctThemes = proverb.theme.split(/[,/]/).map(t => t.trim().replace(/[()]/g, '')).filter(Boolean);
                const correctAnswer = correctThemes[Math.floor(Math.random() * correctThemes.length)];
                const uniqueThemesForOptions = [...new Set(quizProverbs.flatMap(p => p.theme.split(/[,/]/).map(t => t.trim().replace(/[()]/g, '')).filter(Boolean)))];
                let options = [correctAnswer];
                while (options.length < 4 && options.length < uniqueThemesForOptions.length) {
                    const randomTheme = uniqueThemesForOptions[Math.floor(Math.random() * uniqueThemesForOptions.length)];
                    if (!options.includes(randomTheme)) options.push(randomTheme);
                }
                options.sort(() => Math.random() - 0.5);
                dom.quizContainer.innerHTML = `<p class="text-center text-lg mb-4">Quel est le thème principal de ce proverbe ?</p>
                    <div class="mb-6 p-4 bg-[var(--color-bg-alt)] rounded-lg text-center">
                        <p class="text-xl font-serif font-bold text-[var(--color-heading)] italic">« ${proverb.kabyle} »</p>
                        <p class="text-[var(--color-text-light)]">— ${proverb.francais}</p>
                    </div>
                    <div id="quiz-options" class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                        ${options.map(opt => `<div class="quiz-option text-center" data-theme="${opt}" tabindex="0">${opt}</div>`).join('')}
                    </div><div id="quiz-feedback" class="mt-6 text-center"></div>`;
                dom.quizContainer.querySelector('#quiz-options').addEventListener('click', (e) => {
                    if(e.target.closest('.quiz-option')) handleQuizAnswer(e.target.closest('.quiz-option'), correctAnswer, 'theme', quizProverbs);
                });
            };

            const handleQuizAnswer = (selectedElement, correctAnswer, type) => {
                const isCorrect = (type === 'meaning')
                    ? parseInt(selectedElement.dataset.id) === correctAnswer.id
                    : normalizeText(selectedElement.dataset.theme) === normalizeText(correctAnswer);
                document.querySelectorAll('.quiz-option').forEach(el => {
                    el.setAttribute('disabled', true);
                    const elIsCorrect = (type === 'meaning')
                        ? parseInt(el.dataset.id) === correctAnswer.id
                        : normalizeText(el.dataset.theme) === normalizeText(correctAnswer);
                    if(elIsCorrect) el.classList.add('correct');
                });
                if(!isCorrect) selectedElement.classList.add('incorrect');
                const feedback = dom.quizContainer.querySelector('#quiz-feedback');
                const correctAnswerText = type === 'meaning' ? correctAnswer.francais : correctAnswer;
                feedback.innerHTML = `<p class="text-xl font-bold ${isCorrect ? 'text-green-500' : 'text-red-500'}">${isCorrect ? 'Bravo !' : 'Dommage !'}</p>
                    ${!isCorrect ? `<p class="mt-2">La bonne réponse était : <strong class="font-semibold">"${correctAnswerText}"</strong></p>` : ''}
                    <button id="next-quiz-btn" class="mt-4 px-6 py-2 bg-[var(--color-primary)] text-white font-semibold rounded-lg shadow-md hover:scale-105 transition-transform">Question suivante</button>`;
                const nextBtn = document.getElementById('next-quiz-btn');
                nextBtn.addEventListener('click', startQuiz);
                nextBtn.focus();
            };

            // --- GESTION DES ÉVÉNEMENTS ---
            const setupEventListeners = () => {
                dom.searchInput.addEventListener('input', debounce(() => {
                    if (dom.searchInput.value.length < 1 && state.activeTheme === 'tous') {
                        dom.resultsContainer.innerHTML = '';
                        dom.initialLoadMessage.classList.remove('hidden');
                        dom.resultsFeedback.textContent = '';
                        dom.noResults.classList.add('hidden');
                        dom.loadMoreBtn.classList.add('hidden');
                        state.displayedProverbs = [];
                        updateAvailableThemes();
                        return;
                    }
                    loadNextChunk(true);
                }, 300));

                dom.clearSearchBtn.addEventListener('click', () => {
                    dom.searchInput.value = '';
                    dom.resultsContainer.innerHTML = '';
                    dom.initialLoadMessage.classList.remove('hidden');
                    dom.resultsFeedback.textContent = '';
                    dom.noResults.classList.add('hidden');
                    dom.loadMoreBtn.classList.add('hidden');
                    state.displayedProverbs = [];
                    updateAvailableThemes();
                    dom.searchInput.focus();
                });

                dom.loadMoreBtn.addEventListener('click', () => {
                    dom.loadMoreBtn.classList.add('loading');
                    dom.loadMoreBtn.innerHTML = `<span class="loader"></span> Chargement...`;
                    loadNextChunk(false).finally(() => {
                        dom.loadMoreBtn.classList.remove('loading');
                        dom.loadMoreBtn.textContent = "Charger plus";
                    });
                });

                dom.goToExplorerBtn.addEventListener('click', () => setActiveTab('explorer-tab'));

                dom.randomBtn.addEventListener('click', () => {
                    if (!state.isCoreDataLoaded) return showToast("Veuillez attendre le chargement des proverbes.", true);
                    const hasActiveFilter = dom.searchInput.value.trim() || state.activeTheme !== 'tous';
                    const sourceProverbs = hasActiveFilter ? filterProverbs() : state.proverbs;
                    dom.initialLoadMessage.classList.add('hidden');
                    dom.loadMoreBtn.classList.add('hidden');
                    if (sourceProverbs.length === 0) {
                        dom.resultsContainer.innerHTML = '';
                        dom.noResults.classList.remove('hidden');
                        dom.resultsFeedback.textContent = 'Aucun proverbe ne correspond pour un tirage aléatoire.';
                        state.displayedProverbs = [];
                        updateAvailableThemes();
                        return;
                    }
                    dom.noResults.classList.add('hidden');
                    const randomProverbs = [];
                    const usedIds = new Set();
                    const count = Math.min(20, sourceProverbs.length);
                    while (randomProverbs.length < count) {
                        const randomIndex = Math.floor(Math.random() * sourceProverbs.length);
                        const randomProverb = sourceProverbs[randomIndex];
                        if (!usedIds.has(randomProverb.id)) {
                            randomProverbs.push(randomProverb);
                            usedIds.add(randomProverb.id);
                        }
                    }
                    renderChunk(dom.resultsContainer, randomProverbs, dom.searchInput.value, false);
                    state.displayedProverbs = randomProverbs;
                    let feedback = `Affichage de ${count} proverbes aléatoires`;
                    if (hasActiveFilter) feedback += ` correspondant à vos critères.`;
                    else feedback += `.`;
                    dom.resultsFeedback.textContent = feedback;
                });

                window.addEventListener('scroll', () => dom.backToTopBtn.classList.toggle('visible', window.scrollY > 300));
                dom.backToTopBtn.addEventListener('click', () => window.scrollTo({ top: 0, behavior: 'smooth' }));

                dom.navButtons.forEach(button => button.addEventListener('click', () => setActiveTab(button.dataset.tab)));

                dom.themeListContainer.addEventListener('click', (e) => {
                    if (e.target.matches('.theme-pill-button')) {
                        state.activeTheme = e.target.dataset.theme;
                        sessionStorage.setItem('inzan_theme_filter', state.activeTheme);
                        dom.themeListContainer.querySelector('.active')?.classList.remove('active');
                        e.target.classList.add('active');
                        e.target.scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'nearest' });
                        loadNextChunk(true);
                    }
                });

                document.body.addEventListener('click', e => {
                    const card = e.target.closest('[data-id]');
                    if (!card) return;
                    const proverbId = parseInt(card.dataset.id);
                    const proverb = state.proverbs.find(p => p.id === proverbId);
                    if (!proverb) return;
                    if (e.target.closest('.explain-btn')) getProverbExplanation(proverb);
                    if (e.target.closest('.favorite-btn')) toggleFavorite(proverbId);
                    if (e.target.closest('.copy-btn')) navigator.clipboard.writeText(`« ${proverb.kabyle} »\n— ${proverb.francais}`).then(() => showToast("✅ Proverbe copié !"));
                    if (e.target.closest('.share-btn')) {
                        if (navigator.share) navigator.share({ title: 'Proverbe Kabyle', text: `Découvrez ce proverbe kabyle : « ${proverb.kabyle} »\n— ${proverb.francais}`, url: window.location.href }).catch(console.error);
                        else showToast("Le partage n'est pas supporté sur ce navigateur.", true);
                    }
                    if (e.target.closest('.card-theme-badge')) {
                        e.stopPropagation();
                        const themeToFilter = e.target.closest('.card-theme-badge').dataset.theme;
                        setActiveTab('explorer-tab');
                        setTimeout(() => {
                            dom.searchInput.value = themeToFilter;
                            resetThemeFilter(false);
                            loadNextChunk(true);
                        }, 100);
                    }
                });

                dom.modal.closeBtn.addEventListener('click', closeModal);
                dom.modal.backdrop.addEventListener('click', closeModal);

                dom.aboutBtn.addEventListener('click', () => openModal("À propos de l'Œuvre", `<p>Cette collection numérique est un hommage à la richesse de la sagesse populaire kabyle. Elle est basée sur une partie des données patiemment récoltées par Monsieur <strong>Remḍan At Menṣur</strong> dans son <strong>Dictionnaire</strong> de proverbes Kabyles, dont le travail a permis de préserver et de partager ces trésors culturels.</p><p>Ce site a pour vocation de rendre ces proverbes accessibles à tous, de manière interactive et moderne. Il a été conçu comme un outil d'apprentissage et de découverte, enrichi par des technologies contemporaines pour explorer et comprendre l'esprit de la tradition kabyle.</p>`));

                dom.themeToggle.addEventListener('click', () => {
                    const isDark = dom.html.classList.toggle('dark');
                    localStorage.setItem('inzan_theme', isDark ? 'dark' : 'light');
                    dom.themeIcons.light.classList.toggle('hidden', isDark);
                    dom.themeIcons.dark.classList.toggle('hidden', !isDark);
                });

                dom.ai.suggestBtn.addEventListener('click', () => {
                    const context = dom.ai.contextInput.value.trim();
                    if (!context) return showToast("Veuillez décrire une situation.", true);
                    getAISuggestion(context);
                });
            };

            // --- PROCESSUS DE DÉMARRAGE ---
            const main = () => {
                const savedTheme = localStorage.getItem('inzan_theme') || 'light';
                dom.html.classList.toggle('dark', savedTheme === 'dark');
                dom.themeIcons.light.classList.toggle('hidden', savedTheme === 'dark');
                dom.themeIcons.dark.classList.toggle('hidden', savedTheme === 'light');
                setupEventListeners();
                setActiveTab('accueil-tab');
                fetch('proverbs.json')
                    .then(response => {
                        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                        return response.json();
                    })
                    .then(data => {
                        state.proverbs = data.map((p, index) => ({
                            ...p,
                            id: index,
                            kabyle_norm: normalizeText(p.kabyle),
                            francais_norm: normalizeText(p.francais),
                            theme_norm: normalizeText(p.theme)
                        }));
                        state.isCoreDataLoaded = true;
                        const dayOfYear = Math.floor((new Date() - new Date(new Date().getFullYear(), 0, 0)) / 86400000);
                        const dailyProverb = state.proverbs[dayOfYear % state.proverbs.length];
                        dom.proverbOfTheDayCard.innerHTML = createProverbCardHTML(dailyProverb, true);
                        updateAvailableThemes();
                        setTimeout(() => dom.splashScreen.classList.add('hidden'), 500);
                    })
                    .catch(error => {
                        console.error("Could not load proverbs:", error);
                        const errorMessage = `<h1 class="text-2xl font-bold text-red-600">Erreur de chargement</h1>
                            <p class="text-red-500 mt-2">Impossible de charger la banque de proverbes (proverbs.json). <br> ${error.message}</p>
                            <p class="mt-4 text-[var(--color-text-light)]">Veuillez vérifier que le fichier est bien présent et non corrompu.</p>`;
                        dom.initialLoadMessage.innerHTML = errorMessage;
                        dom.proverbOfTheDayCard.innerHTML = `<p class="text-center text-red-500">Erreur de chargement.</p>`;
                        dom.themeListContainer.innerHTML = `<p class="text-center text-red-500 text-sm">Erreur.</p>`;
                        dom.quizContainer.innerHTML = `<p class="text-center text-red-500">Erreur de chargement des données.</p>`;
                        setTimeout(() => dom.splashScreen.classList.add('hidden'), 100);
                    });
            };
            main();
        });
    </script>
</body>
</html>
